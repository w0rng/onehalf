local function get_colors()
	local background = vim.o.background or "dark"
	if background == "light" then
		return require("onehalf.colors.light")
	else
		return require("onehalf.colors.dark")
	end
end

local hl = vim.api.nvim_set_hl
local theme = {}

theme.set_highlights = function()
	-- Get fresh colors every time we set highlights
	local c = get_colors()
	-- highlights
	hl(0, "Normal", { fg = c.fg, bg = c.bg })
	hl(0, "NormalFloat", { fg = c.comment_fg, bg = c.bg })
	hl(0, "Pmenu", { fg = c.comment_fg, bg = c.bg })
	hl(0, "PmenuSel", { fg = "NONE", bg = c.selection })
	hl(0, "PmenuKind", { link = "Pmenu" })
	hl(0, "PmenuKindSel", { link = "PmenuSel" })
	hl(0, "PmenuExtra", { link = "Pmenu" })
	hl(0, "PmenuExtraSel", { link = "PmenuSel" })
	hl(0, "PmenuSbar", { fg = c.selection, bg = "NONE" })
	hl(0, "PmenuThumb", { fg = c.fg, bg = c.selection })
	hl(0, "Cursor", { fg = c.bg, bg = c.blue })
	hl(0, "CursorColumn", { fg = "NONE", bg = c.cursor_line })
	hl(0, "CursorLine", { fg = "NONE", bg = c.cursor_line })
	hl(0, "LineNr", { fg = c.gutter_fg, bg = c.gutter_bg })
	hl(0, "CursorLineNr", { fg = c.fg, bg = "NONE" })
	hl(0, "DiffAdd", { fg = c.green, bg = "NONE" })
	hl(0, "DiffChange", { fg = c.yellow, bg = "NONE" })
	hl(0, "DiffDelete", { fg = c.red, bg = "NONE" })
	hl(0, "DiffText", { fg = c.blue, bg = "NONE" })
	hl(0, "IncSearch", { fg = c.bg, bg = c.yellow })
	hl(0, "Search", { fg = c.bg, bg = c.yellow })
	hl(0, "ErrorMsg", { fg = c.fg, bg = "NONE" })
	hl(0, "ModeMsg", { fg = c.fg, bg = "NONE" })
	hl(0, "MoreMsg", { fg = c.fg, bg = "NONE" })
	hl(0, "WarningMsg", { fg = c.red, bg = "NONE" })
	hl(0, "Question", { fg = c.magenta, bg = "NONE" })
	hl(0, "SpellBad", { fg = c.red, bg = "NONE" })
	hl(0, "SpellCap", { fg = c.yellow, bg = "NONE" })
	hl(0, "SpellLocal", { fg = c.yellow, bg = "NONE" })
	hl(0, "SpellRare", { fg = c.yellow, bg = "NONE" })
	hl(0, "TabLine", { fg = c.comment_fg, bg = c.cursor_line })
	hl(0, "TabLineFill", { fg = c.comment_fg, bg = c.cursor_line })
	hl(0, "TabLineSel", { fg = c.fg, bg = c.bg })
	hl(0, "Visual", { fg = "NONE", bg = c.selection })
	hl(0, "VisualNOS", { fg = "NONE", bg = c.selection })
	hl(0, "ColorColumn", { fg = "NONE", bg = c.color_col })
	hl(0, "Conceal", { fg = c.fg, bg = "NONE" })
	hl(0, "Directory", { fg = c.blue, bg = "NONE" })
	hl(0, "VertSplit", { fg = c.vertsplit, bg = c.vertsplit })
	hl(0, "Folded", { fg = c.fg, bg = "NONE" })
	hl(0, "FoldColumn", { fg = c.fg, bg = "NONE" })
	hl(0, "SignColumn", { fg = c.fg, bg = "NONE" })
	hl(0, "MatchParen", { fg = c.fg, bg = "NONE", underline = true })
	hl(0, "SpecialKey", { fg = c.fg, bg = "NONE" })
	hl(0, "Title", { fg = c.green, bg = "NONE" })
	hl(0, "WildMenu", { fg = c.fg, bg = "NONE" })
	hl(0, "Whitespace", { fg = c.non_text, bg = "NONE" })
	hl(0, "NonText", { fg = c.non_text, bg = "NONE" })
	hl(0, "Comment", { fg = c.green, bg = "NONE", italic = true })
	hl(0, "Constant", { fg = c.cyan, bg = "NONE" })
	hl(0, "String", { fg = c.green, bg = "NONE" })
	hl(0, "Character", { fg = c.green, bg = "NONE" })
	hl(0, "Number", { fg = c.yellow, bg = "NONE" })
	hl(0, "Boolean", { fg = c.yellow, bg = "NONE" })
	hl(0, "Float", { fg = c.yellow, bg = "NONE" })
	hl(0, "Identifier", { fg = c.red, bg = "NONE" })
	hl(0, "Function", { fg = c.blue, bg = "NONE" })
	hl(0, "Statement", { fg = c.magenta, bg = "NONE" })
	hl(0, "Conditional", { fg = c.magenta, bg = "NONE" })
	hl(0, "Repeat", { fg = c.magenta, bg = "NONE" })
	hl(0, "Label", { fg = c.magenta, bg = "NONE" })
	hl(0, "Operator", { fg = c.fg, bg = "NONE" })
	hl(0, "Keyword", { fg = c.red, bg = "NONE" })
	hl(0, "Exception", { fg = c.magenta, bg = "NONE" })
	hl(0, "PreProc", { fg = c.yellow, bg = "NONE" })
	hl(0, "Include", { fg = c.magenta, bg = "NONE" })
	hl(0, "Define", { fg = c.magenta, bg = "NONE" })
	hl(0, "Macro", { fg = c.magenta, bg = "NONE" })
	hl(0, "PreCondit", { fg = c.yellow, bg = "NONE" })
	hl(0, "Type", { fg = c.yellow, bg = "NONE" })
	hl(0, "StorageClass", { fg = c.yellow, bg = "NONE" })
	hl(0, "Structure", { fg = c.yellow, bg = "NONE" })
	hl(0, "Typedef", { fg = c.yellow, bg = "NONE" })
	hl(0, "Special", { fg = c.yellow, bg = "NONE" })
	hl(0, "SpecialChar", { fg = c.fg, bg = "NONE" })
	hl(0, "Tag", { fg = c.fg, bg = "NONE" })
	hl(0, "Delimiter", { fg = c.comment_fg, bg = "NONE" })
	hl(0, "SpecialComment", { fg = c.fg, bg = "NONE" })
	hl(0, "Debug", { fg = c.fg, bg = "NONE" })
	hl(0, "Underlined", { fg = c.fg, bg = "NONE" })
	hl(0, "Ignore", { fg = c.fg, bg = "NONE" })
	hl(0, "Error", { fg = c.red, bg = c.gutter_bg })
	hl(0, "Todo", { fg = c.magenta, bg = "NONE" })
	hl(0, "Variable", { fg = c.red, bg = "NONE" })
	hl(0, "Bold", { fg = "NONE", bg = "NONE", bold = true })
	hl(0, "Italic", { fg = "NONE", bg = "NONE", italic = true })

	-- Treesitter
	hl(0, "TSText", { fg = c.fg, bg = "NONE" })
	hl(0, "TSComment", { link = "Comment" })
	hl(0, "TSConstant", { link = "Constant" })
	hl(0, "TSConstMacro", { link = "Constant" })
	hl(0, "TSString", { link = "String" })
	hl(0, "TSStringRegex", { link = "String" })
	hl(0, "TSStringEscape", { link = "String" })
	hl(0, "TSCharacter", { link = "Character" })
	hl(0, "TSNumber", { link = "Number" })
	hl(0, "TSBoolean", { link = "Boolean" })
	hl(0, "TSFloat", { link = "Float" })
	hl(0, "TSFunction", { link = "Function" })
	hl(0, "TSFuncBuiltin", { link = "Function" })
	hl(0, "TSFuncMacro", { link = "Function" })
	hl(0, "TSMethod", { link = "Function" })
	hl(0, "TSConditional", { link = "Conditional" })
	hl(0, "TSRepeat", { link = "Repeat" })
	hl(0, "TSLabel", { link = "Label" })
	hl(0, "TSOperator", { link = "Operator" })
	hl(0, "TSKeyword", { link = "Keyword" })
	hl(0, "TSKeywordReturn", { link = "Keyword" })
	hl(0, "TSKeywordFunction", { link = "Keyword" })
	hl(0, "TSException", { link = "Exception" })
	hl(0, "TSInclude", { link = "Include" })
	hl(0, "TSType", { link = "Type" })
	hl(0, "TSTypeBuiltin", { link = "Type" })
	hl(0, "TSStructure", { link = "Structure" })
	hl(0, "TSPunctSpecial", { link = "Special" })
	hl(0, "TSTag", { link = "Tag" })
	hl(0, "TSPunctDelimiter", { link = "Delimiter" })
	hl(0, "TSUnderline", { link = "Underlined" })
	hl(0, "TSError", { link = "Error" })
	hl(0, "TSVariable", { link = "Variable" })
	hl(0, "TSVariableBuiltin", { link = "Variable" })

	-- Whichkey
	hl(0, "WhichKey", { fg = c.red, bg = c.bg })
	hl(0, "WhichKeyBorder", { fg = c.fg, bg = c.bg })
	hl(0, "WhichKeyDesc", { fg = c.blue, bg = "NONE" })
	hl(0, "WhichKeyGroup", { fg = c.yellow, bg = "NONE" })
	hl(0, "WhichKeyIcon", { fg = c.fg, bg = "NONE" })
	hl(0, "WhichKeyNormal", { fg = c.red, bg = c.bg })
	hl(0, "WhichKeySeparator", { fg = c.green, bg = "NONE" })
	hl(0, "WhichKeyTitle", { fg = c.blue, bg = "NONE" })
	hl(0, "WhichKeyValue", { fg = c.green, bg = "NONE" })

	-- Git
	hl(0, "GitSignsAdd", { fg = c.green, bg = "NONE" })
	hl(0, "GitSignsAddNr", { fg = c.green, bg = "NONE" })
	hl(0, "GitSignsAddLn", { fg = "NONE", bg = c.green })
	hl(0, "GitSignsAddCul", { fg = "NONE", bg = c.green })
	hl(0, "GitSignsChange", { fg = c.yellow, bg = "NONE" })
	hl(0, "GitSignsChangeNr", { fg = c.yellow, bg = "NONE" })
	hl(0, "GitSignsChangeLn", { fg = "NONE", bg = c.yellow })
	hl(0, "GitSignsChangeCul", { fg = "NONE", bg = c.yellow })
	hl(0, "GitSignsDelete", { fg = c.red, bg = "NONE" })
	hl(0, "GitSignsDeleteNr", { fg = c.red, bg = "NONE" })
	hl(0, "GitSignsDeleteLn", { fg = "NONE", bg = c.red })
	hl(0, "GitSignsDeleteCul", { fg = "NONE", bg = c.red })

	-- Telescope
	hl(0, "TelescopeSelection", { fg = c.blue, bg = "NONE" })
	hl(0, "TelescopeMatching", { fg = c.yellow, bg = "NONE", bold = true })
	hl(0, "TelescopeBorder", { fg = c.blue, bg = c.bg })

	-- StatusLine
	hl(0, "StatusLine", { fg = c.blue, bg = c.cursor_line })
	hl(0, "StatusLineNC", { fg = c.comment_fg, bg = c.cursor_line })
	hl(0, "StatusLineSeparator", { fg = c.black, bg = "NONE" })
	hl(0, "StatusLineTerm", { fg = c.black, bg = "NONE" })
	hl(0, "StatusLineTermNC", { fg = c.black, bg = "NONE" })

	-- Cmp
	hl(0, "CmpGhostText", { fg = c.comment_fg, bg = "NONE" })
	hl(0, "CmpItemAbbr", { fg = c.fg, bg = "NONE" })
	hl(0, "CmpItemAbbrDeprecated", { fg = c.comment_fg, bg = "NONE", strikethrough = true })
	hl(0, "CmpItemAbbrMatch", { fg = c.fg, bg = "NONE" })
	hl(0, "CmpItemAbbrMatchFuzzy", { fg = c.fg, bg = "NONE" })
	hl(0, "CmpItemKind", { fg = c.fg, bg = "NONE" })
	hl(0, "CmpItemKindSnippet", { fg = c.magenta, bg = "NONE" })
	hl(0, "CmpItemKindCopilot", { fg = c.fg, bg = "NONE" })
	hl(0, "CmpItemKindFolder", { fg = c.blue, bg = "NONE" })
	hl(0, "CmpItemKindKeyword", { link = "Keyword" })
	hl(0, "CmpItemKindClass", { link = "Structure" })
	hl(0, "CmpItemKindInterface", { link = "Structure" })
	hl(0, "CmpItemKindStruct", { link = "Structure" })
	hl(0, "CmpItemKindEnum", { link = "Structure" })
	hl(0, "CmpItemKindConstructor", { link = "Special" })
	hl(0, "CmpItemKindFunction", { link = "Function" })
	hl(0, "CmpItemKindMethod", { link = "Function" })
	hl(0, "CmpItemKindVariable", { link = "Variable" })
	hl(0, "CmpItemKindField", { link = "Variable" })
	hl(0, "CmpItemKindProperty", { link = "Variable" })
	hl(0, "CmpItemKindText", { link = "Variable" })
	hl(0, "CmpItemKindEnumMember", { link = "Constant" })
	hl(0, "CmpItemKindConstant", { link = "Constant" })
	hl(0, "CmpItemKindEvent", { fg = c.fg, bg = "NONE" })
	hl(0, "CmpItemKindModule", { fg = c.fg, bg = "NONE" })
	hl(0, "CmpItemKindValue", { fg = c.fg, bg = "NONE" })
	hl(0, "CmpItemKindUnit", { fg = c.fg, bg = "NONE" })
	hl(0, "CmpItemKindFile", { fg = c.fg, bg = "NONE" })
	hl(0, "CmpItemKindColor", { fg = c.fg, bg = "NONE" })
	hl(0, "CmpItemKindReference", { fg = c.fg, bg = "NONE" })
	hl(0, "CmpItemKindOperator", { fg = c.fg, bg = "NONE" })
	hl(0, "CmpItemKindTypeParameter", { fg = c.fg, bg = "NONE" })

	hl(0, "bookmarks_virt_text_hl", { fg = c.comment_fg, bg = "NONE", italic = true })
end

return theme
